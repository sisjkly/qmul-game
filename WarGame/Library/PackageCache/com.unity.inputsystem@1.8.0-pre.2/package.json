{
  "name": "com.unity.inputsystem",
  "displayName": "Input System",
  "version": "1.8.0-pre.2",
  "unity": "2019.4",
  "description": "A new input system which can be used as a more extensible and customizable alternative to Unity's classic input system in UnityEngine.Input.",
  "keywords": [
    "input",
    "events",
    "keyboard",
    "mouse",
    "gamepad",
    "touch",
    "vr",
    "xr"
  ],
  "dependencies": {
    "com.unity.modules.uielements": "1.0.0"
  },
  "_upm": {
    "changelog": "### Changed\n- Removed icons from action map list as these were always the same and the icon was placeholder\n- Input asset editor now switched to use UI Toolkit which matches the project wide input actions editor interface.\n- Changed [`InputActionProperty`](xref:UnityEngine.InputSystem.InputActionProperty) property drawer to be more compact. Use the More menu (`â‹®`) button to open a dropdown menu and select between Use Reference and Use Action.\n- Static analysis warnings regarding flag enums have been suppressed in order to avoid compile-time warnings or errors.\n- Action Map and Action Tree views of the UI Toolkit based Input Action Editor now prevents deselection in both views when Escape key is pressed.\n- Input Action Asset editors Auto-save feature has been modified to trigger on focus-lost when activated instead of triggering on every modification to the asset in order to reduce impact of processing required to handle modified assets.\n- Project-wide input actions template extension changed from .inputactions to .json. This avoids showing template actions in the action's selector UI that are not intended to be used.\n- Re-enabled some UI tests that were disabled on iOS.\n- Reorganized package Project Settings so that \"Input System Package\" setting node contains \"Input Actions\" and \"Settings\" becomes a child node when Project-wide Actions are available. For Unity versions where Project-wide Actions are not available, the settings structure remains unchanged.\n- Make Project-wide Actions the default actions for Player Input.\n\n### Added\n- Support for [Game rotation vector](https://developer.android.com/reference/android/hardware/Sensor#TYPE_GAME_ROTATION_VECTOR) sensor on Android\n- Duplicate Input Action Items in the new Input Action Asset Editor with Ctrl+D (Windows) or Cmd+D (Mac)\n- Selection of InputActionReferences from project-wide actions on fields that are of type InputActionReference. Uses a new advanced object picker that allows better searching and filtering of actions.\n- Reset project wide Input Settings to default via a new Kebab-menu in Input System Project Settings.\n\n### Fixed\n- Partially fixed case ISX-1357 (Investigate performance regressing over time).  A sample showed that leaving an InputActionMap enabled could lead to an internal list of listeners growing.  This leads to slow-down, so we now warn if we think this is happening.\n- UI fix for input fields in interactions: they are wider now and the width is fixed.\n- Fixed exiting empty input fields for actions, action maps and composites in the input action asset editor.\n- Fixed an issue where selecting an Action in the Input Action Asset Editor tree-view and then pressing ESC to unselect would throw an `InvalidOperationException`.\n- Fixed an issue where selecting an Action Map in the Input Action Asset Editor list and then pressing ESC to unselect would print an `NullReferenceException` to the Debug console.\n- Fixed case [ISXB-251](https://issuetracker.unity3d.com/product/unity/issues/guid/ISXB-251) (Action only calls started & performed callbacks when control type is set to Vector3Composite). `EvaluateMagnitude` wasn't overridden for Vector3Composite, also made some minor changes to Vector3Composite and Vector2Composite for consistency.\n- Fixed case [ISXB-580](https://issuetracker.unity3d.com/product/unity/issues/guid/ISXB-580) (UI Submit / Cancel not working with Switch Pro controller) by adding \"Submit\" & \"Cancel\" usages to the Switch Pro controller input controls.\n- Fixed an issue where undoing deletion of Action Maps did not restore Actions correctly.\n- Fixed case [ISXB-628](https://issuetracker.unity3d.com/product/unity/issues/guid/ISXB-628) (OnIMECompositionChange does not return an empty string on accept when using Microsoft IME) by clarifying expectations and intended usage for the IME composition change event.\n- Fixed issue where the expanded/collapsed state of items in the input action editor was not properly saved between rebuilds of the UI.\n- Fixed issue where The Profiler shows incorrect data and spams the console with \"Missing Profiler.EndSample\" errors when there is an Input System Component in Scene).\n- Fixed an issue where undoing duplications of action maps caused console errors.\n- Fix for BindingSyntax `WithInteraction()` which was incorrectly using processors.\n- Fix for UITK Input Action Editor binding 'Listen' button which wasn't working in the case for Control Type 'Any'.\n- Fixed issue of visual elements being null during editing project-wide actions in project settings which prompted console errors.\n- Fixed case ISX-1436 (UI TK Input Action Asset Editor - Error deleting Bindings with DeleteKey on Windows).\n- Fixed issue with UI Toolkit based Input Action Editor not restoring it's selected items after Domain Reload.\n- Fixed the [`GetHapticCapabilitiesCommand`](xref:UnityEngine.InputSystem.XR.Haptics.GetHapticCapabilitiesCommand) always failing to execute due to a mismatch in the size in bytes of the payload and the size expected by XR devices. Changed [`HapticCapabilities`](xref:UnityEngine.InputSystem.XR.Haptics.HapticCapabilities) to include all properties returned by the XR input subsystem. This makes Input System match the functionality provided by the [XR](https://docs.unity3d.com/Manual/com.unity.modules.xr.html) module's [`InputDevice.TryGetHapticCapabilities`](https://docs.unity3d.com/ScriptReference/XR.InputDevice.TryGetHapticCapabilities.html) and [`HapticCapabilities`](https://docs.unity3d.com/ScriptReference/XR.HapticCapabilities.html)."
  },
  "upmCi": {
    "footprint": "309d2b5685b706092cdc377bb5e58d84e26cb6a5"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.inputsystem@1.8/manual/index.html",
  "repository": {
    "url": "https://github.com/Unity-Technologies/InputSystem.git",
    "type": "git",
    "revision": "f1497f44f42bffec269b9e70a38679d4723679ab"
  },
  "samples": [
    {
      "displayName": "Custom Binding Composite",
      "description": "Shows how to implement a custom composite binding.",
      "path": "Samples~/CustomComposite"
    },
    {
      "displayName": "Custom Device",
      "description": "Shows how to implement a custom input device.",
      "path": "Samples~/CustomDevice"
    },
    {
      "displayName": "Custom Device Usages",
      "description": "Shows how to tag devices with custom usage strings that can be used, for example, to distinguish multiple instances of the same type of device (e.g. 'Gamepad') based on how the device is used (e.g. 'Player1' vs 'Player2' or 'LeftHand' vs 'RightHand').",
      "path": "Samples~/CustomDeviceUsages"
    },
    {
      "displayName": "Gamepad Mouse Cursor",
      "description": "An example that shows how to use the gamepad for driving a mouse cursor for use with UIs.",
      "path": "Samples~/GamepadMouseCursor"
    },
    {
      "displayName": "In-Game Hints",
      "description": "Demonstrates how to create in-game hints in the UI which reflect current bindings and active control schemes.",
      "path": "Samples~/InGameHints"
    },
    {
      "displayName": "InputDeviceTester",
      "description": "A scene containing UI to visualize the controls on various supported input devices.",
      "path": "Samples~/InputDeviceTester"
    },
    {
      "displayName": "Input Recorder",
      "description": "Shows how to capture and replay input events. Also useful by itself to debug input event sequences.",
      "path": "Samples~/InputRecorder"
    },
    {
      "displayName": "On-Screen Controls",
      "description": "Demonstrates a simple setup for an on-screen joystick.",
      "path": "Samples~/OnScreenControls"
    },
    {
      "displayName": "Rebinding UI",
      "description": "An example UI component that demonstrates how to create UI for rebinding actions.",
      "path": "Samples~/RebindingUI"
    },
    {
      "displayName": "Simple Demo",
      "description": "A walkthrough of a simple character controller that demonstrates several techniques for working with the input system. See the README.md file in the sample for details.",
      "path": "Samples~/SimpleDemo"
    },
    {
      "displayName": "Simple Multiplayer",
      "description": "Demonstrates how to set up a simple local multiplayer scenario.",
      "path": "Samples~/SimpleMultiplayer"
    },
    {
      "displayName": "Touch Samples",
      "description": "A series of sample scenes for using touch input with the Input System package. This sample is not actually part of the package, but needs to be downloaded.",
      "path": "Samples~/TouchSamples"
    },
    {
      "displayName": "UI vs. Game Input",
      "description": "An example that shows how to deal with ambiguities that may arrise when overlaying interactive UI elements on top of a game scene.",
      "path": "Samples~/UIvsGameInput"
    },
    {
      "displayName": "Unity Remote",
      "description": "An example with a simple scene for trying out the Unity Remote app.",
      "path": "Samples~/UnityRemote"
    },
    {
      "displayName": "Visualizers",
      "description": "Several example visualizations of input controls/devices and input actions.",
      "path": "Samples~/Visualizers"
    }
  ]
}
